<templateSet group="TypeScript">
  <template name="it" value="it('$DESC$', () =&gt; {&#10;  $END$&#10;});" description="jasmine unit test &quot;it&quot; method" toReformat="false" toShortenFQNames="true">
    <variable name="DESC" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="des" value="describe('$DESC$', () =&gt; {&#10;  $END$&#10;});" description="jasmin unit test &quot;describe&quot; method" toReformat="false" toShortenFQNames="true">
    <variable name="DESC" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx-state" value="import { Action } from '@ngrx/store';&#10;&#10;export interface $Name$State {&#10;  data: $Name$Data$optional$;&#10;  isLoading: boolean;&#10;  error?: string;&#10;}&#10;&#10;export interface $Name$Data {&#10;}&#10;&#10;export class $Name$ActionTypes {&#10;  static readonly LOAD_$SNAKE_NAME$ = type('LOAD_$SNAKE_NAME$');&#10;  static readonly SET_$SNAKE_NAME$ = type('SET_$SNAKE_NAME$');&#10;  static readonly $SNAKE_NAME$_ERROR = type('$SNAKE_NAME$_ERROR');&#10;  static readonly RESET_$SNAKE_NAME$ = type('RESET_$SNAKE_NAME$');&#10;}&#10;&#10;export class Load$Name$Action implements Action {&#10;  readonly type = $Name$ActionTypes.LOAD_$SNAKE_NAME$;&#10;  payload: $LoadPayload$;&#10;&#10;  constructor($loadPayload$: $LoadPayload$) {&#10;    this.payload = $loadPayload$;&#10;  }&#10;}&#10;&#10;export class Set$Name$Action implements Action {&#10;  readonly type = $Name$ActionTypes.SET_$SNAKE_NAME$;&#10;  payload: $Name$Data$optional$;&#10;&#10;  constructor(data: $Name$Data$optional$) {&#10;    this.payload = data;&#10;  }&#10;}&#10;&#10;export class $Name$ErrorAction implements Action {&#10;  readonly type = $Name$ActionTypes.$SNAKE_NAME$_ERROR;&#10;  payload: string;&#10;&#10;  constructor(errorMessage: string) {&#10;    this.payload = errorMessage;&#10;  }&#10;}&#10;&#10;export class Reset$Name$Action implements Action {&#10;  readonly type = $Name$ActionTypes.RESET_$SNAKE_NAME$;&#10;}&#10;&#10;type $Name$Actions = Load$Name$Action | Set$Name$Action | $Name$ErrorAction | Reset$Name$Action;&#10;&#10;const initialState: $Name$State = {&#10;  data: $initialData$,&#10;  isLoading: true&#10;};&#10;&#10;export function $name$Reducer(state: $Name$State = initialState, action: $Name$Actions): $Name$State {&#10;  switch (action.type) {&#10;    case $Name$ActionTypes.LOAD_$SNAKE_NAME$: {&#10;      return { ...state, isLoading: true, error: null };&#10;    }&#10;    case $Name$ActionTypes.SET_$SNAKE_NAME$: {&#10;      return { ...state, data: action.payload, isLoading: false, error: null };&#10;    }&#10;    case $Name$ActionTypes.$SNAKE_NAME$_ERROR: {&#10;      return { ...state, error: action.payload, isLoading: false };&#10;    }&#10;    case $Name$ActionTypes.RESET_$SNAKE_NAME$: {&#10;      return { ...initialState };&#10;    }&#10;    default: {&#10;      return state;&#10;    }&#10;  }&#10;}&#10;" description="NgRx state, actions, and reducer for common case" toReformat="false" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="optional" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SNAKE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LoadPayload" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="loadPayload" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="initialData" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx-state-spec" value="import {&#10;  $Name$Data,&#10;  $Name$ErrorAction,&#10;  $name$Reducer,&#10;  $Name$State,&#10;  Load$Name$Action, Reset$Name$Action,&#10;  Set$Name$Action&#10;} from './$kebabName$.state';&#10;&#10;describe('$Name$State', () =&gt; {&#10;  function createState(overrides: Partial&lt;$Name$State&gt; = {}): $Name$State {&#10;    return {&#10;      data: [create$Name$Data()],&#10;      isLoading: true,&#10;      ...overrides&#10;    };&#10;  }&#10;&#10;  function create$Name$Data(overrides: Partial&lt;$Name$Data&gt; = {}): $Name$Data {&#10;    return {&#10;      ...overrides&#10;    };&#10;  }&#10;&#10;  describe('$name$Reducer', () =&gt; {&#10;    it('sets isLoading and nulls error on Load$Name$Action', () =&gt; {&#10;      const state = createState({ isLoading: false, error: 'error' });&#10;      const action = new Load$Name$Action();&#10;&#10;      const result = $name$Reducer(state, action);&#10;      expect(result).toEqual({ ...state, isLoading: true, error: null });&#10;    });&#10;&#10;    it('sets data, isLoading, nulls error on Set$Name$Action', () =&gt; {&#10;      const state = createState({ isLoading: true, error: 'error' });&#10;      const data =;&#10;      const action = new Set$Name$Action(data);&#10;&#10;      const result = $name$Reducer(state, action);&#10;      expect(result).toEqual({ data, isLoading: false, error: null });&#10;    });&#10;&#10;    it('sets error, isLoading on $Name$ErrorAction', () =&gt; {&#10;      const state = createState({ isLoading: true, error: null });&#10;      const action = new $Name$ErrorAction('error');&#10;&#10;      const result = $name$Reducer(state, action);&#10;      expect(result).toEqual({ ...state, isLoading: false, error: 'error' });&#10;    });&#10;&#10;    it('resets state on Reset$Name$Action', () =&gt; {&#10;      const state = createState({ isLoading: false, error: 'error' });&#10;      const action = new Reset$Name$Action();&#10;&#10;      const result = $name$Reducer(state, action);&#10;      expect(result).toEqual();&#10;    });&#10;  });&#10;});&#10;" description="Spec file for NgRx state and reducer common case" toReformat="false" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="kebabName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx-effect" value="import { Actions, Effect, ofType } from '@ngrx/effects';&#10;import {&#10;  $Name$ActionTypes, $Name$ErrorAction, Load$Name$Action, Set$Name$Action&#10;} from './$kebabName$.state';&#10;import { catchError, map, switchMap } from 'rxjs/operators';&#10;import { Injectable } from '@angular/core';&#10;&#10;@Injectable()&#10;export class $Name$Effects {&#10;  @Effect()&#10;  load$Name$$ = this.actions$.pipe(&#10;    ofType($Name$ActionTypes.LOAD_$NAME$),&#10;    switchMap((action: Load$Name$Action) =&gt; this.$serviceName$Service.$serviceMethod$(action.payload).pipe(&#10;      map(data =&gt; new Set$Name$Action(data)),&#10;      catchError(this.effectsService.handleError(error =&gt; new $Name$ErrorAction(error.message)))&#10;    ))&#10;  );&#10;&#10;  constructor(private actions$: Actions,&#10;              private $serviceName$Service: $ServiceName$Service,&#10;              private effectsService: EffectsService) {&#10;  }&#10;}&#10;" description="NgRx effects class for common load case" toReformat="false" toShortenFQNames="true">
    <variable name="ServiceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="kebabName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceMethod" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ngrx-effect-spec" value="import { $Name$Effects } from './$kebabName$.effects';&#10;import * as sinon from 'sinon';&#10;import { TestBed } from '@angular/core/testing';&#10;import { provideMockActions } from '@ngrx/effects/testing';&#10;import { of, throwError } from 'rxjs';&#10;import { cold, hot } from 'jasmine-marbles';&#10;import { $Name$ErrorAction, Load$Name$Action, Set$Name$Action } from './$kebabName$.state';&#10;&#10;describe('$Name$Effects', () =&gt; {&#10;  let effects: $Name$Effects;&#10;  let actions;&#10;  let $serviceName$ServiceStub;&#10;  let effectsServiceMock;&#10;&#10;  beforeEach(() =&gt; {&#10;    $serviceName$ServiceStub = sinon.createStubInstance($ServiceName$Service);&#10;    effectsServiceMock = new EffectsServiceMock();&#10;&#10;    TestBed.configureTestingModule({&#10;      providers: [&#10;        $Name$Effects,&#10;        provideMockActions(() =&gt; actions),&#10;        { provide: $ServiceName$Service, useValue: $serviceName$ServiceStub },&#10;        { provide: EffectsService, useValue: effectsServiceMock }&#10;      ]&#10;    });&#10;&#10;    effects = TestBed.get($Name$Effects);&#10;  });&#10;&#10;  it('should emit Set$Name$Action on successful Load$Name$Action', () =&gt; {&#10;    const data = ;&#10;    $serviceName$ServiceStub.$serviceMethod$.returns(of(data));&#10;&#10;    actions = hot('--a-', { a: new Load$Name$Action(null) });&#10;    const expected = cold('--b-', { b: new Set$Name$Action(data) });&#10;    expect(effects.load$Name$$).toBeObservable(expected);&#10;  });&#10;&#10;  it('should emit $Name$ErrorAction on unsuccessful Load$Name$Action', () =&gt; {&#10;    $serviceName$ServiceStub.$serviceMethod$.returns(throwError(new Error()));&#10;&#10;    actions = hot('--a-', { a: new Load$Name$Action(null) });&#10;    const expected = cold('--b-', { b: new $Name$ErrorAction(EffectsServiceMock.errorMessage) });&#10;    expect(effects.load$Name$$).toBeObservable(expected);&#10;  });&#10;});&#10;" description="NgRx effects spec for common load case" toReformat="false" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="kebabName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ServiceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceMethod" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>